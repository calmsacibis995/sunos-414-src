.\" @(#)Intro.2 1.1 94/10/31 SMI; from UCB 4.3 and S5
.TH INTRO 2 "21 January 1990"
.de en
.HP
.if '\\$2'unused' \\$1  \fI\\$2\fP  \\$3
.if !'\\$2'unused' \\$1  \s-1\\$2\s0  \\$3
.br
.if !'\\$2'unused' .IX  "\\$2 error number"  ""  "\fL\\$2\fP error number"
..
.SH NAME
intro \- introduction to system services and error numbers
.SH SYNOPSIS
.B #include <errno.h>
.IX  "system calls, introduction to"  ""  ""  "" PAGE START
.IX  "introduction"  "system calls"  ""  ""  PAGE START
.SH DESCRIPTION
.LP
This section describes all of the system calls.
.LP
A 2V section number means one or more of the following:
.TP 3
\(bu
The man page documents System V behavior only.
.TP
\(bu
The man page documents default SunOS behavior and System V behavior
as it differs from the default behavior.  These System V differences
are presented under
.SB SYSTEM V
section headers.
.TP
\(bu
The man page documents behavior compliant with
.I \s-1IEEE\s0 Std 1003.1-1988
(\s-1POSIX.1\s0).
.LP
Compile programs for the System V environment using
.BR /usr/5bin/cc .
Compile programs for the default SunOS environment using
.BR /usr/bin/cc .
The following man pages describe the various environments provided
by Sun:
.BR lint (1V),
.BR ansic (7V),
.BR bsd (7),
.BR posix (7V),
.BR sunos (7V),
.BR svidii (7V),
.BR svidiii (7V),
.BR xopen (7V).
.LP
Most of these calls have one or more error returns.
An error condition is indicated by an otherwise impossible return
value.  This is almost always
.RB ` \-1 ';
the individual descriptions specify the details.
An error code is also made available
in the external variable
.BR errno .
.B errno
is not cleared on successful calls, so it should be tested only
after an error has been indicated.
Note:  several system calls overload the meanings of these
error numbers, and the meanings must be interpreted according
to the type and circumstances of the call.  See
.SB ERROR CODES
below for a list of system error codes.
.LP
As with normal arguments, all return codes and values from
functions are of type integer unless otherwise noted.
.LP
The rest of this man page is organized as follows:
.TP 25
.SB "SYSTEM PARAMETERS"
System limits, values and options.
.TP
.SB DEFINITIONS
System abstractions and services.
.TP
.SB STREAMS
Modular communication between software layers (tty system, networking).
.TP
.SB "SYSTEM V IPC"
System V shared memory, semaphores, and messages.
.TP
.SB "ERROR CODES"
A list of system error codes with descriptions.
.TP
.SB "LIST OF SYSTEM CALLS"
A list of all system calls with brief descriptions.
.br
.ne 10
.SH "SYSTEM PARAMETERS"
.LP
Sections 2 and 3 support
a naming convention for those system parameters that may
change from one object to another (for example, path name length may is 255 on
a UFS file system but may be 14 on an NFS file system exported by a System V
based server).  Typically, the system has to be queried (using
.BR pathconf (2V),
.BR fpathconf(\|) ,
or 
.BR sysconf (2V)) 
to retrieve the parameter of interest.  The parameters have
conceptual names such as 
.SM PATH_MAX\s0.
These names are defined in header files if and only if
they are invariant across all file systems and releases of the operating
system, that is, very rarely.  Because they
.I may
be defined and/or
available from the system calls, there have to be separate names for the
parameters and their values.  The notation
.SM {PATH_MAX}
denotes the value of the parameter
.SM PATH_MAX\s0.
Do not confuse this with
\fB\s-1_PC_PATH_MAX\s0\fP,
the name that is
passed to the system call to retrieve the value:
.IP
.ft B
maxpathlen = pathconf(".", _PC_PATH_MAX);
.ft
.LP
See
.BR pathconf (2V),
and
.BR sysconf (2V)
for further information about these parameters.
.br
.ne 10
.SH DEFINITIONS
.SS "Controlling Terminal"
.LP
A terminal that is associated with a session.  Each session may have at most
one controlling terminal; a terminal may be the controlling terminal of at
most one session.  The controlling terminal is used to direct signals
(such as interrupts and job control signals) to the appropriate processes by
way of
the tty's process group.  Controlling terminals are assigned when a session 
leader opens a terminal file that is not currently a controlling terminal.
.SS Descriptor
.LP
An integer assigned by the system when a file is referenced by
.BR open (2V),
.BR dup (2V),
or 
.BR pipe (2V)
or a socket is referenced by
.BR socket (2)
or
.BR socketpair (2)
that uniquely identifies an access path to that file or socket from
a given process or any of its children.
.SS Directory
.LP
A directory is a special type of file that contains entries
that are references to other files.
Directory entries are called links.  By convention, a directory
contains at least two links,
.RB ` \&. '
and
.RB ` \&.\|. ' ,
referred to as
.I dot
and
.I dot-dot
respectively.
Dot refers to the directory itself and
dot-dot refers to its parent directory.
.SS "Effective User \s-1ID\s0, Effective Group \s0ID\s0, and Access Groups"
.LP
Access to system resources is governed by three values:
the effective user
.SM ID\s0,
the effective group
.SM ID\s0,
and the supplementary group \s-1ID\s0.
.PP
The effective user
.SM ID
and effective group
.SM ID
are initially the process's real user
.SM ID
and real group
.SM ID
respectively.  Either
may be modified through execution of a set-user-\s-1ID\s0
or set-group-\s-1ID\s0
file (possibly by one of its ancestors) (see
.BR execve (2V)).
.LP
The supplementary group \s-1ID\s0 are an additional set of group
.SM ID\s0's
used only in determining resource accessibility.  Access checks
are performed as described below in
.BR "File Access Permissions" .
.SS "File Access Permissions"
.LP
Every file in the file system has a set of access permissions.
These permissions are used in determining whether a process
may perform a requested operation on the file (such as opening
a file for writing).  Access permissions are established at the
time a file is created.  They may be changed at some later time
through the 
.BR chmod (2V)
call. 
.LP
File access is broken down according to whether a file may be: read,
written, or executed.  Directory files use the execute
permission to control if the directory may be searched. 
.LP
File access permissions are interpreted by the system as
they apply to three different classes of users: the owner
of the file, those users in the file's group, anyone else.
Every file has an independent set of access permissions for
each of these classes.  When an access check is made, the system
decides if permission should be granted by checking the access
information applicable to the caller.
.LP
Read, write, and execute/search permissions on
a file are granted to a process if:
.IP
The process's effective user
.SM ID
is that of the super-user.
.IP
The process's effective user
.SM ID
matches the user
.SM ID
of the owner of the file and the owner permissions allow the access.
.IP
The process's effective user
.SM ID
does not match the user
.SM ID
of the owner of the file, and either the process's effective group
.SM ID
matches the group
.SM ID
of the file, or the group
.SM ID
of the file is in the process's supplementary group \s-1ID\s0s,
and the group permissions allow the access.
.IP
Neither the effective user
.SM ID
nor effective group
.SM ID
and supplementary group \s-1ID\s0s of the process
match the corresponding user
.SM ID
and group
.SM ID
of the file, but the permissions for \*(lqother users\*(rq allow access.
.LP
Otherwise, permission is denied.
.br
.ne 10
.SS File Name
.LP
Names consisting of up to 
.SM {NAME_MAX}
characters may be used to name
an ordinary file, special file, or directory.
.LP
These characters may be selected from the set of all
.SM ASCII
character excluding \e0 (null) and the
.SM ASCII
code for
.B /
(slash).  (The parity bit,
bit 8, must be 0.)
.LP
Note: it is generally unwise to use
.BR * ,
.BR ? ,
.BR [ ,
or
.B ]
as part of file names because of the special meaning attached to these
characters by the shell.
See
.BR sh (1).
Although permitted, it is advisable to avoid the use of unprintable
characters in file names.
.SS "Parent Process \s-1ID\s0"
A new process is created by a currently active process
.B fork (2V).
The parent process
.SM ID
of a process is the process
.SM ID
of its creator.
.SS "Path Name and Path Prefix"
A path name is a null-terminated character string starting with an
optional slash
.RB ( / ),
followed by zero or more directory names separated
by slashes, optionally followed by a file name.
The total length of a path name must be less than 
.BR {PATH_MAX}
characters.
.LP
More precisely, a path name is a null-terminated character string
constructed as follows:
.LP
.RS
.nf
.BI < path-name ">::=<" file-name ">\|\(bv<" path-prefix\fB><\fIfile-name\fB>\|\(bv/
.BI < path-prefix ">::=<" rtprefix ">\|\(bv/<" rtprefix\fB>
.BI < rtprefix ">::=<" dirname ">/\|\(bv<" rtprefix\fB><\fIdirname\fB>/
.fi
.RE
.LP
where
.BI < file-name >
is a string of 1 to 
.BR {NAME_MAX}
characters other than the
.SM ASCII
slash and null, and
.BI < dirname >
is a string of 1 to 
.BR {NAME_MAX}
characters
(other than the
.SM ASCII
slash and null) that names a directory.
.LP
If a path name begins with a slash, the search begins at the
.I root
directory.
Otherwise, the search begins at the current working directory.
.LP
A slash, by itself, names the root directory.  
A dot
.RB ( \|.\|)
names the current working directory.
.LP
A null path name also refers to the current directory. However, this
is not true of all 
.SM UNIX
systems.  
(On such systems, accidental use of a null path name in
routines that do not check for it may corrupt the current
working directory.)
For portable code, specify the current directory explicitly using
`\fB"."\fR',
rather than
`\fB""\fR'.
.SS "Process Group \s-1ID\s0"
Each active process is a member of a process group that is identified by
a positive integer called the process group
.SM ID\s0.
This
.SM ID
is the process
.SM ID
of the group leader. 
This grouping permits the signaling of related processes (see
the description of
.BR killpg(\|)
on
.BR kill (2V))
and the job control mechanisms of
.BR csh (1).
Process groups exist from their creation until the last member is reaped
(that is, a parent issued a call to
.BR wait (2V)).
.SS "Process \s-1ID\s0"
Each active process in the system is uniquely identified by a positive
integer called a process
.SM ID\s0.
The range of this
.SM ID
is from 0 to MAXPID (see
.BR <sys/param.h> ).
.SS "Real User \s-1ID\s0 and Real Group \s-1ID\s0"
Each user on the system is identified by a positive integer
termed the real user
.SM ID\s0.
.LP
Each user is also a member of one or more groups. 
One of these groups is distinguished from others and
used in implementing accounting facilities.  The positive
integer corresponding to this distinguished group is termed 
the real group
.SM ID\s0.
.LP
All processes have a real user
.SM ID
and real group
.SM ID\s0.
These are initialized from the equivalent attributes
of the process that created it.
.br
.ne 8
.SS "Root Directory and Current Working Directory"
.LP
Each process has associated with it a concept of a root directory
and a current working directory for the purpose of resolving path
name searches.  The root directory is used as the starting point for
absolute path name resolution.
The current working directory is used as the starting point for relative
path name resolution.
A process's root directory need not be (but typically is) the root
directory of the root file system.
.SS Session
.LP
Each process is a member of a session.  A session is associated with each
controlling terminal in the system, such as login shells and windows.
Each process is created in the session of its parent.  A process may alter
its session using
.BR setsid (2V)
if it is not already a session leader.  The system
supports session
.SM ID\s0s.
A session leader is a process having process
.SM ID
equal to
process group
.SM ID
equal to session
.SM ID\s0.
Only a session leader may acquire a
controlling terminal.  In SunOS Release 4.1, processes are created in sessions
by
.BR init (8)
and
.B inetd (8C).
Sessions are also created for processes that
disassociate themselves from a controlling terminal using
.IP
.B ioctl(fd, TIOCNOTTY, 0)
.LP
or
.IP
.B setpgrp(mypid, 0)
For more information about sessions, see
.BR setsid (2V).
.ne 16
.SS Signal
.LP
Signals are used for notification of asynchronous events.  Signals may
directed to processes, process groups, and other combinations of processes.
Signals may be sent by a process or by the operating system.  Some signals
may be caught.  There is typically a default behavior on receipt if they
are not caught.  For more information about signals, see
.BR signal (3V),
.BR kill (2V),
.BR sigvec (2),
.BR termio (4).
.SS "Sockets and Address Families"
A socket is an endpoint for communication between processes, similar
to the way a telephone is the endpoint of communication between humans.
Each socket has queues for sending and receiving data.
.LP
Sockets are typed according to their communications properties.
These properties include whether messages sent and received
at a socket require the name of the partner, whether communication
is reliable, the format used in naming message recipients, etc.
.LP
Each instance of the system supports some
collection of socket types; consult
.BR socket (2)
for more information about the types available and
their properties.
.LP
Each instance of the system supports some number of sets of
communications protocols.  Each protocol set supports addresses
of a certain format.  An Address Family is the set of addresses
for a specific group of protocols.  Each socket has an address
chosen from the address family in which the socket was created.
.br
.ne 5
.SS "Special Processes"
.LP
The processes with a process
.SM ID\s0's
of 0, 1, and 2 are special.
Process 0 is the scheduler. 
Process 1 is the initialization process
.BR init ,
and is the ancestor of every other process in the system.
It is used to control the process structure.
Process 2 is the paging daemon.
.SS "Super-user"
A process is recognized as a
.I super-user
process and is granted special privileges if its effective user
.SM ID
is 0.
.SS "Tty Process Group"
Each active process can be a member of a terminal group that is identified
by a positive integer called the tty process group
.SM ID\s0.  This grouping is used
to arbitrate between multiple jobs contending for the same terminal
(see
.BR csh (1),
and
.BR termio (4)),
to direct signals (tty and job control) to the appropriate process group,
and to terminate a group of related processes upon termination
of one of the processes in the group (see
.BR exit (2V)
and
.BR sigvec (2)).
.br
.ne 7
.SH \fB\s-1STREAMS\s0\fP
A set of kernel mechanisms that support the development of
network services and data communication
.IR driver s.
It defines interface standards for character input/output
within the kernel and between the kernel and user level processes.
The
.SM STREAMS
mechanism is composed of utility routines,
kernel facilities and a set of data structures.
.SS Stream
A stream is a full-duplex data path within the kernel 
between a user process and driver routines.
The primary components are a stream head,
a
.I driver
and zero or more
.I modules
between the stream head and
.IR driver .
A stream
is analogous to a Shell pipeline except that data flow and
processing are bidirectional.
.SS Stream Head
In a stream, the stream head
is the end of the stream
that provides the interface between the stream
and a user process.
The principle functions of the stream head
are processing
.SM STREAMS\s0-related
system calls, and passing data and information between a user
process and the stream.
.SS Driver
In a stream, the
.I driver
provides the interface between
peripheral hardware and the stream.
A
.I driver
can also be a
.RI pseudo- driver ,
such as a
.I multiplexor
or
.IR emulator ,
and need not be associated with a hardware device.
.SS Module
A module is an entity containing processing
routines for input and output data.
It always exists in the middle of a stream,
between the stream's head
and a
.IR driver .
A
.I module
is the
.SM STREAMS
counterpart to the commands
in a Shell pipeline except that a module contains a pair
of functions which allow independent bidirectional
.RI ( downstream
and
.IR upstream )
data flow and processing.
.SS Downstream
In a stream, the direction from stream head to
.IR driver .
.SS Upstream
In a stream, the direction from
.I driver
to stream head.
.SS Message
In a stream,
one or more blocks of data or information, with associated
.SM STREAMS
control structures.  Messages
can be of several defined types, which identify the message
contents. 
Messages are the only means of transferring data and communicating
within a stream.
.SS Message Queue
In a stream,
a linked list of
.I messages
awaiting processing by a
.I module
or
.IR driver .
.SS Read Queue
In a stream, the
.I message queue
in a
.I module
or
.I driver
containing
.I messages
moving
.IR upstream .
.SS Write Queue
In a stream, the
.I message queue
in a
.I module
or
.I driver
containing
.I messages
moving
.IR downstream .
.SS Multiplexor
A multiplexor is a driver that allows
.SM STREAMS
associated with several user processes to be
connected to a single
.IR driver ,
or several
.I drivers
to be connected to a single user process.
.SM STREAMS
does not provide a general multiplexing
.IR driver ,
but does provide the facilities for
constructing them, and for connecting multiplexed
configurations of
.SM STREAMS\s0.
.IX  "system calls, introduction to"  ""  ""  "" PAGE END
.IX  "introduction"  "system calls"  ""  ""  PAGE END
.SH "SYSTEM V IPC"
.LP
The SunOS system supports the System V
.SM IPC
namespace.  For information about
shared memory, semaphores and messages see
.BR msgctl (2),
.BR msgget (2),
.BR msgop (2),
.BR semctl (2),
.BR semget (2),
.BR semop (2),
.BR shmctl (2),
.BR shmget (2)
and
.BR shmop (2).
.br
.ne 5
.SH "ERROR CODES"
.LP
Each system call description attempts to
list all possible error numbers.
The following is a complete list of the error numbers and their
names as given in
.BR <errno.h> .
.IX  "system error numbers, introduction to"  ""  "" ""
.IX  "introduction"  "system error numbers"  ""  ""
.en E2BIG 7 "Arg list too long"
An argument list longer than 1,048,576 bytes is presented to
.BR execve (2V)
or a routine that called
.BR execve(\|) .
.en EACCES 13 "Permission denied"
An attempt was made to access a file in a way forbidden
by the protection system.
.en EADDRINUSE 48 "Address already in use"
Only one usage of each address is normally permitted.
.en EADDRNOTAVAIL 49 "Can't assign requested address"
Normally results from an attempt to create a socket with an
address not on this machine.
.en EADV 83 "Advertise error"
An attempt was made to advertise
a resource which has been advertised already, or to stop the
RFS while there are resources still advertised, or to force
unmount a resource when it is still advertised.
This error is RFS specific.
.en EAFNOSUPPORT 47 "Address family not supported by protocol family"
An address incompatible with the requested protocol was used.
For example, you should not necessarily expect to be able to use
.SM PUP
Internet addresses with
.SM ARPA
Internet protocols.
.en EAGAIN 11 "No more processes"
A
.BR fork (2V)
failed because the system's process table is full
or the user is not allowed to create any more processes,
or a system call failed because of insufficient resources.
.en EALREADY 37 "Operation already in progress"
An operation was attempted on a non-blocking object that already
had an operation in progress.
.en EBADF 9 "Bad file number"
Either a file descriptor refers to no open file,
or a read (respectively, write) request is made to
a file that is open only for writing (respectively, reading).
.en EBADMSG 76 "Not a data message"
During a
.BR read (2V),
.BR getmsg (2),
or
.BR ioctl (2)
.SM I_RECVFD
system call to a
.SM STREAMS
device, something has come to the head of the queue
that cannot be processed.
That something depends on the system call
.RS
.RS
.PD 0
.TP 10
.BR read (2V)
control information or a passed file descriptor.
.TP
.BR getmsg (2)
passed file descriptor.
.TP
.BR ioctl (2)
control or data information.
.PD
.RE
.RE
.en EBUSY 16 "Device busy"
An attempt was made to mount a file system that was already mounted or
an attempt was made to dismount a file system
on which there is an active file
(open file, mapped file, current directory, or mounted-on directory).
.en ECHILD 10 "No children"
A
.BR wait (2V)
was executed by a process that had no existing or
unwaited-for child processes.
.en ECOMM 85 "Communication error on send"
An attempt was made to send messages
to a remote machine when no virtual circuit could be found.
This error is RFS specific.
.en ECONNABORTED 53 "Software caused connection abort"
A connection abort was caused internal to your host machine.
.en ECONNREFUSED 61 "Connection refused"
No connection could be made because the target machine actively
refused it.
This usually results from trying to connect
to a service that is inactive on the foreign host.
.en ECONNRESET 54 "Connection reset by peer"
A connection was forcibly closed by a peer. This normally
results from the peer executing a
.BR shutdown (2)
call.
.en EDEADLK 78 "Deadlock situation detected/avoided"
An attempt was made to lock a system resource that would have resulted
in a deadlock situation.
.en EDESTADDRREQ 39 "Destination address required"
A required address was omitted from an operation on a socket.
.en EDOM 33 "Math argument"
The argument of a function in the math library (as described in section 3M)
is out of the domain of the function.
.\".en EDOTDOT 88 "EDOTDOT!!!!"
.\" what?  This isn't in sVr3.
.en EDQUOT 69 "Disc quota exceeded"
A
.B write(\|)
to an ordinary file, the creation of a directory or symbolic link, or
the creation of a directory entry failed because
the user's quota of disk blocks was
exhausted, or the allocation of an inode for a newly
created file failed because the user's quota of inodes was exhausted.
.en EEXIST 17 "File exists"
An existing file was mentioned in an inappropriate context,
for example,
.BR link (2V).
.en EFAULT 14 "Bad address"
The system encountered a hardware fault in attempting to
access the arguments of a system call.
.en EFBIG 27 "File too large"
The size of a file exceeded the maximum file size (1,082,201,088 bytes).
.en EHOSTDOWN 64 "Host is down"
A socket operation failed because the destination host was down.
.en EHOSTUNREACH 65 "Host is unreachable"
A socket operation was attempted to an unreachable host.
.en EIDRM 77 "Identifier removed
This error is returned to processes that resume execution due to the removal
of an identifier from the
.en EINPROGRESS 36 "Operation now in progress"
An operation that takes a long time to complete (such as a
.BR connect (2))
was attempted on a non-blocking object (see
.BR ioctl (2)).
.en EINTR 4 "Interrupted system call"
An asynchronous signal (such as interrupt or quit)
that the process has elected to catch occurred during a system call.
If execution is resumed after processing the signal,
and the system call is not restarted,
it will appear as if the interrupted system call
returned this error condition.
.en EINVAL 22 "Invalid argument"
A system call was made with an invalid argument; for example, dismounting
a non-mounted file system, mentioning an unknown signal in
.B sigvec(\|)
or
.BR kill(\|) ,
reading or writing a file for which
.B lseek(\|)
has generated a negative pointer,
or some other argument inappropriate for the call.
Also set by math functions,
see
.BR intro (3).
.en EIO 5 "I/O error"
Some physical I/O error occurred.
This error may in some cases occur
on a call following the one to which it actually applies.
.en EISCONN 56 "Socket is already connected"
A
.B connect(\|)
request was made on an already connected socket; or, a
.B sendto(\|)
or
.B sendmsg(\|)
request on a connected socket specified a destination
other than the connected party.
.en EISDIR 21 "Is a directory"
An attempt was made to write on a directory.
.en ELOOP 62 "Too many levels of symbolic links"
A path name lookup involved more than 20 symbolic links.
.en EMFILE 24 "Too many open files"
A process tried to have more open files than the system allows a process to
have.
The customary configuration limit is 64 per process.
.en EMLINK 31 "Too many links"
An attempt was made to make more than 32767 hard links to a file.
.en EMSGSIZE 40 "Message too long"
A message sent on a socket was larger than the internal message buffer.
.en EMULTIHOP 87 "Multihop attempted"
An attempt was made to
access remote resources which are not directly accessible.
This error is RFS specific.
.en ENAMETOOLONG 63 "File name too long"
A component of a path name exceeded 255 characters, or an entire
path name exceeded 1024 characters.
.en ENETDOWN 50 "Network is down"
A socket operation encountered a dead network.
.en ENETRESET 52 "Network dropped connection on reset"
The host you were connected to crashed and rebooted.
.en ENETUNREACH 51 "Network is unreachable"
A socket operation was attempted to an unreachable network.
.en ENFILE 23 "File table overflow"
The system's table of open files is full, and temporarily no more
.BR open(\|)
calls can be accepted.
.en ENOBUFS 55 "No buffer space available"
An operation on a socket or pipe was not performed because
the system lacked sufficient buffer space.
.en ENODEV 19 "No such device"
An attempt was made to apply an inappropriate
system call to a device (for example, an attempt to read a write-only device)
or an attempt was made to use a device not configured by the system.
.en ENOENT 2 "No such file or directory"
This error occurs when a file name is specified
and the file should exist but does not, or when one
of the directories in a path name does not exist.
.en ENOEXEC 8 "Exec format error"
A request is made to execute a file
which, although it has the appropriate permissions,
does not start with a valid magic number (see
.BR a.out (5)).
.en ENOLCK 79 "No locks available"
A system-imposed limit on the number of simultaneous file and record locks
was reached and no more were available at that time.
.en ENOLINK 82 "Link has be severed"
The link (virtual circuit) connecting to a remote machine is gone.
This error is RFS specific.
.br
.ne 8
.en ENOMEM 12 "Not enough memory"
During an
.BR execve (2V),
.BR sbrk(\|) ,
or
.BR brk (2),
a program asks for more address space or swap space than the system is
able to supply,
or a process size limit would be exceeded.
A lack of swap space is normally a temporary condition; however,
a lack of address space is not a temporary condition.
The maximum size
of the text, data, and stack segments is a system parameter.
Soft limits may be increased to their corresponding hard limits.
.en ENOMSG 75 "No message of desired type
An attempt was made to receive a message of a type
that does not exist on the specified message queue; see
.BR msgop (2).
.en ENONET 80 "Machine is not on the network"
A attempt was made to advertise,
unadvertise, mount, or unmount remote resources while the machine has not
done the proper startup to connect to the network.
This error is Remote File Sharing (RFS) specific.
.en ENOPROTOOPT 42 "Option not supported by protocol
A bad option was specified in a
.B setsockopt(\|)
or
.BR getsockopt (2)
call.
.en ENOSPC 28 "No space left on device"
A
.B write(\|)
to an ordinary file, the creation of a
directory or symbolic link, or the creation of a directory
entry failed because no more disk blocks are available
on the file system, or the allocation of an inode for a newly
created file failed because no more inodes are available on the file system.
.en ENOSR 74 "Out of stream resources"
During a
.SM STREAMS
.BR open (2V),
either no
.SM STREAMS
queues or no
.SM STREAMS
head data structures were available.
.en ENOSTR 72 "Not a stream device"
A
.BR putmsg (2)
or
.BR getmsg (2)
system call was attempted on a file descriptor that is not a
.SM STREAMS
device.
.en ENOSYS 90 "Function not implemented"
An attempt was made to use a function that is not available in this
implementation.
.en ENOTBLK 15 "Block device required"
A file that is not a block device was mentioned where a block device was
required, for example, in
.BR mount (2V).
.en ENOTCONN 57 "Socket is not connected"
An request to send or receive data was disallowed because
the socket is not connected.
.en ENOTDIR 20 "Not a directory"
A non-directory was specified where a directory is required,
for example, in a path prefix or as an argument to
.BR chdir (2V).
.en ENOTEMPTY 66 "Directory not empty"
An attempt was made to remove a directory with entries other than
.RB ` &. '
and
.RB ` &.|. '
by performing a
.B rmdir(\|)
system call or a
.B rename(\|)
system call with that directory specified as the target directory.
.en ENOTSOCK 38 "Socket operation on non-socket"
Self-explanatory.
.en ENOTTY 25 "Inappropriate ioctl for device"
The code used in an
.B ioctl(\|)
call is not supported by the object that the file descriptor in the call
refers to.
.en ENXIO 6 "No such device or address"
I/O on a special file refers to a subdevice that does not exist,
or beyond the limits of the device.
It may also occur when, for example, a tape drive
is not on-line or no disk pack is loaded on a drive.
.en EOPNOTSUPP 45 "Operation not supported on socket"
For example, trying to
.I accept
a connection on a datagram socket.
.en EPERM 1 "Not owner"
Typically this error indicates an attempt to modify a file in some way
forbidden except to its owner or super-user.
It is also returned for attempts
by ordinary users to do things allowed only to the super-user.
.en EPFNOSUPPORT 46 "Protocol family not supported"
The protocol family has not been configured into the
system or no implementation for it exists.
.en EPIPE 32 "Broken pipe"
An attempt was made to write on a pipe or socket for which there is no
process to read the data.
This condition normally generates a signal;
the error is returned if the signal is caught or ignored.
.\".en EPROCLIM 67 "Too many processes"
.\" This one isn't returned by anything in SunOS 4.1 and it will probably
.\" go away in the future.
.en EPROTO 86 "Protocol error"
Some protocol error occurred.  This error
is device specific, but is generally not related
to a hardware failure.
.en EPROTONOSUPPORT 43 "Protocol not supported"
The protocol has not been configured into the
system or no implementation for it exists.
.en EPROTOTYPE 41 "Protocol wrong type for socket"
A protocol was specified that does not support the semantics of the
socket type requested. For example, you cannot use the
.SM ARPA
Internet
.SM UDP
protocol with type
.BR \s-1SOCK_STREAM\s0 .
.en ERANGE 34 "Result too large"
The value of a function in the math library (as described in section 3M)
is unrepresentable within machine precision.
.\".en EREMCHG 89 "Remote address changed"
.\" No description of this error found in sVr3 or sVr4 docs, and SunOS 4.1
.\" doesn't return it anywhere.  Apparently, neither does sVr4.
.en EREMOTE 71 "Too many levels of remote in path"
An attempt was made to remotely mount a file system into a path that
already has a remotely mounted component.
.en EROFS 30 "Read-only file system"
An attempt to modify a file or directory was made on a file system mounted
read-only.
.en ERREMOTE 81 "Object is remote"
An attempte was made to advertise
a resource which is not on the local machine, or to
mount/unmount a device (or pathname) that is on a remote machine.
This error is RFS specific.
.en ESHUTDOWN 58 "Can't send after socket shutdown"
A request to send data was disallowed because the socket
had already been shut down with a previous
.BR shutdown (2)
call.
.en ESOCKTNOSUPPORT 44 "Socket type not supported"
The support for the socket type has not been configured into the
system or no implementation for it exists.
.en ESPIPE 29 "Illegal seek"
An
.B lseek(\|)
was issued to a socket or pipe.
This error may also be issued for
other non-seekable devices.
.en ESRCH 3 "No such process"
The process or process group whose number was given
does not exist, or any such process is already dead.
.en ESRMNT 84 "Srmount error"
An attempt was made to stop 
RFS while there are resources still mounted by remote machines.
This error is RFS specific.
.en ESTALE 70 "Stale NFS file handle"
An
.SM NFS
client referenced a file that it had opened but that had since been
deleted.
.en ETIME 73 "Timer expired"
The timer set for a
.SM STREAMS
.BR ioctl (2)
call has expired.
The cause of this error is device
specific and could indicate either a hardware
or software failure, or perhaps a timeout value
that is too short for the specific operation.
The status of the
.BR ioctl (2)
operation is indeterminate.
.en ETIMEDOUT 60 "Connection timed out"
A
.I connect
request or an
.SM NFS
request failed because the party to which the request
was made did not properly respond after a period of time.
(The timeout period is dependent on the communication protocol.)
.\".en ETOOMANYREFS 59 "Too many references: can't splice"
.\" This one isn't returned by anything in SunOS 4.1 and it will probably
.\" go away in the future.
.en ETXTBSY 26 "Text file busy"
An attempt was made to execute a pure-procedure program that is currently
open for writing, or an attempt was made to open for writing a
pure-procedure program that is being executed.
.en EUSERS 68 "Too many users"
An operation to read disk quota information for the user failed
because the system quota table was full.
.en EWOULDBLOCK 35 "Operation would block"
An operation that would cause a process to block was attempted
on an object in non-blocking mode (see
.BR ioctl (2)).
.br
.ne 4
.en EXDEV 18 "Cross-device link"
A hard link to a file on another file system was attempted.
.en unused 0
.SH SEE ALSO
.BR brk (2),
.BR chdir (2V),
.BR chmod (2V),
.BR connect (2),
.BR dup (2V),
.BR execve (2V),
.BR exit (2V),
.BR fork (2V),
.BR getmsg (2),
.BR getsockopt (2),
.BR ioctl (2),
.BR killpg (2),
.BR link (2V),
.BR mount (2V),
.BR msgctl (2),
.BR msgget (2),
.BR msgop (2),
.BR open (2V),
.BR pipe (2V),
.BR putmsg (2),
.BR read (2V),
.BR semctl (2),
.BR semget (2),
.BR semop (2),
.BR getsockopt (2),
.BR shmctl (2),
.BR shmget (2),
.BR shmop (2),
.BR shutdown (2),
.BR sigvec (2),
.BR socket (2),
.BR socketpair (2),
.BR wait (2V),
.BR csh (1),
.BR sh (1),
.BR intro(3),
.BR perror(3)
.BR termio (4),
.BR a.out (5)
.SH "LIST OF SYSTEM CALLS"
.sp
.if t .ta 25n; +20n
.if n .ta 20n; +20n
.nf
\fBName Appears on Page Description\fR
.sp
.nr zZ 1
.so man2/List.2
.nr zZ 0
.fi
